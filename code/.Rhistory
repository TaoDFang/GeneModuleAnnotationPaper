sample_predictions=integer()
for(i in 1:32){
sample_predictions[i]=sum(temple_data[i,]>0.5)
}
#print(max(temple_data))
if(max(sample_predictions)>3)
{
#print(file_name)
print(count)
roche_hasPrediction_filenames[[count]]=file_name
#print( rownames(temple_data)[sample_predictions>5])
roche_hasPrediction_samplenames[[count]]=rownames(temple_data)[sample_predictions>3]
count=count+1
}
}
anonymous_filenames=gsub("LTA4H_CAIA_exprs_EachRepli_liver_raw_genes","DGE",roche_hasPrediction_filenames)
roche_model_hasprediction=data.frame(anonymous_file_names=anonymous_filenames,
anonymous_sample_names=unlist(lapply(roche_hasPrediction_samplenames,paste,collapse=",")))
a=unlist(roche_hasPrediction_samplenames)
b=unique(a)
c=rep(0,length(b))
names(c)=b
for (name in names(c)){
c[name]=sum(a==name)
}
c=sort(c,decreasing = TRUE)
roche_sample_hasprediction=data.frame(anonymous_sample_names=names(c),
prediction_nums=c)
path_name="~/Documents/MasterThesis_Data/DE_Enrichment_Pathologies_Data"
RNA_seq_data_path="~/Documents/MasterThesis_Data/RNA_DATA_TG_GATEs/Learn"
LTA4H_count=read.csv(file = paste(path_name,"LTA4H_CAIA_EdgeR_EachRepli.csv",sep = "/"),stringsAsFactors = FALSE,sep = ",",header = TRUE,row.names = 1)
raw_colnames=colnames(LTA4H_count)
anonymous_colnames=gsub("RO7233414","Drug_A",raw_colnames)
anonymous_colnames=gsub("RO7227986","Drug_B",anonymous_colnames)
anonymous_colnames=gsub("RO7256855","Drug_C",anonymous_colnames)
anonymous_colnames=gsub("PBS","Control",anonymous_colnames)
colnames(LTA4H_count)=anonymous_colnames
a=t(LTA4H_count)
a=a[,colSums(a)>0]
#rownames(a)=unname(sapply(rownames(a), function(x){substr(x,1,3)}))
weird_samples=rownames(roche_sample_hasprediction)[roche_sample_hasprediction$prediction_nums>=4]
categorial=data.frame(categorial=rep("Not Fluent in Prediction",nrow(a)),stringsAsFactors = FALSE)
rownames(categorial)=rownames(a)
categorial[weird_samples,]="Fluent in Prediction"
res.pca <- prcomp(a,  scale = TRUE)
rownames(categorial)=unname(sapply(rownames(categorial),function(x){substr(x,1,3)}))
Roche_inhouse_DE_pca=autoplot(res.pca,data=categorial,label=TRUE,colour='categorial',label.size=5,size=1)+
theme(text = element_text(size=8))+
scale_x_continuous(limits = c(-0.6,0.4))
ggsave(paste(figure_path,"Roche_inhouse_DE_pca.pdf"),plot = Roche_inhouse_DE_pca,width = 3.5,height = 2.6,units = "in",dpi = 600)
path_name="~/Documents/MasterThesis_Data/DE_Enrichment_Pathologies_Data"
RNA_seq_data_path="~/Documents/MasterThesis_Data/RNA_DATA_TG_GATEs/Learn"
LTA4H_count=read.csv(file = paste(path_name,"LTA4H_CAIA_EdgeR_EachRepli.csv",sep = "/"),stringsAsFactors = FALSE,sep = ",",header = TRUE,row.names = 1)
raw_colnames=colnames(LTA4H_count)
anonymous_colnames=gsub("RO7233414","Drug_A",raw_colnames)
anonymous_colnames=gsub("RO7227986","Drug_B",anonymous_colnames)
anonymous_colnames=gsub("RO7256855","Drug_C",anonymous_colnames)
anonymous_colnames=gsub("PBS","Control",anonymous_colnames)
colnames(LTA4H_count)=anonymous_colnames
a=t(LTA4H_count)
a=a[,colSums(a)>0]
#rownames(a)=unname(sapply(rownames(a), function(x){substr(x,1,3)}))
weird_samples=rownames(roche_sample_hasprediction)[roche_sample_hasprediction$prediction_nums>=4]
categorial=data.frame(categorial=rep("Frequently falsely predicted samples ",nrow(a)),stringsAsFactors = FALSE)
rownames(categorial)=rownames(a)
categorial[weird_samples,]="Not frequently falsely predicted samples "
res.pca <- prcomp(a,  scale = TRUE)
rownames(categorial)=unname(sapply(rownames(categorial),function(x){substr(x,1,3)}))
Roche_inhouse_DE_pca=autoplot(res.pca,data=categorial,label=TRUE,colour='categorial',label.size=5,size=1)+
theme(text = element_text(size=8))+
scale_x_continuous(limits = c(-0.6,0.4))
ggsave(paste(figure_path,"Roche_inhouse_DE_pca.pdf"),plot = Roche_inhouse_DE_pca,width = 3.5,height = 2.6,units = "in",dpi = 600)
Roche_inhouse_DE_pca=autoplot(res.pca,data=categorial,label=TRUE,colour='categorial',label.size=3,size=1)+
theme(text = element_text(size=8))+
scale_x_continuous(limits = c(-0.6,0.4))
ggsave(paste(figure_path,"Roche_inhouse_DE_pca.pdf"),plot = Roche_inhouse_DE_pca,width = 3.5,height = 2.6,units = "in",dpi = 600)
Roche_inhouse_DE_pca=autoplot(res.pca,data=categorial,label=TRUE,colour='categorial',label.size=1,size=1)+
theme(text = element_text(size=8))+
scale_x_continuous(limits = c(-0.6,0.4))
ggsave(paste(figure_path,"Roche_inhouse_DE_pca.pdf"),plot = Roche_inhouse_DE_pca,width = 3.5,height = 2.6,units = "in",dpi = 600)
help("autoplot")
Roche_inhouse_DE_pca=autoplot(res.pca,data=categorial,label=TRUE,colour='categorial',label.size=5,size=1)+
theme(text = element_text(size=8),
legend.text=element_text(size=3))+
scale_x_continuous(limits = c(-0.6,0.4))
ggsave(paste(figure_path,"Roche_inhouse_DE_pca.pdf"),plot = Roche_inhouse_DE_pca,width = 3.5,height = 2.6,units = "in",dpi = 600)
Roche_inhouse_DE_pca=autoplot(res.pca,data=categorial,label=TRUE,colour='categorial',label.size=5,size=1)+
theme(text = element_text(size=8),
legend.text=element_text(size=8))+
scale_x_continuous(limits = c(-0.6,0.4))
ggsave(paste(figure_path,"Roche_inhouse_DE_pca.pdf"),plot = Roche_inhouse_DE_pca,width = 4,height = 3,units = "in",dpi = 600)
Roche_inhouse_DE_pca=autoplot(res.pca,data=categorial,label=TRUE,colour='categorial',label.size=5,size=1)+
theme(text = element_text(size=8),
legend.text=element_text(size=8))+
scale_x_continuous(limits = c(-0.6,0.4))
ggsave(paste(figure_path,"Roche_inhouse_DE_pca.pdf"),plot = Roche_inhouse_DE_pca,width = 4,height = 2,units = "in",dpi = 600)
Roche_inhouse_DE_pca=autoplot(res.pca,data=categorial,label=TRUE,colour='categorial',label.size=5,size=1)+
theme(text = element_text(size=8),
legend.text=element_text(size=8))+
scale_x_continuous(limits = c(-0.6,0.4))
ggsave(paste(figure_path,"Roche_inhouse_DE_pca.pdf"),plot = Roche_inhouse_DE_pca,width = 7,height = 5,units = "in",dpi = 600)
Roche_inhouse_DE_pca=autoplot(res.pca,data=categorial,label=TRUE,colour='categorial',label.size=5,size=1)+
theme(text = element_text(size=5),
legend.text=element_text(size=5))+
scale_x_continuous(limits = c(-0.6,0.4))
ggsave(paste(figure_path,"Roche_inhouse_DE_pca.pdf"),plot = Roche_inhouse_DE_pca,width = 4,height = 3,units = "in",dpi = 600)
Roche_inhouse_DE_pca=autoplot(res.pca,data=categorial,label=TRUE,colour='categorial',label.size=5,size=1)+
theme(text = element_text(size=5),
legend.text=element_text(size=5))+
scale_x_continuous(limits = c(-0.6,0.4))
ggsave(paste(figure_path,"Roche_inhouse_DE_pca.pdf"),plot = Roche_inhouse_DE_pca,width = 4,height = 2.6,units = "in",dpi = 600)
getwd()
knitr::opts_chunk$set(echo = TRUE)
file_names=list.files(path = ASO_data_path,,full.names = TRUE)
ASO_data_path="~/Documents/MasterThesis_Data/201507ratLNA-edgeR-liver/"
file_names=list.files(path = ASO_data_path,,full.names = TRUE)
file_names
ASO_data_path="~/Documents/MasterThesis_Data/201507ratLNA-edgeR-liver"
file_names=list.files(path = ASO_data_path,,full.names = TRUE)
file1=read.csv(file_names[[1]])
View(file1)
file1=read.csv(file_names[[1]],sep = "\t",header = TRUE)
View(file1)
rm(list = ls())
ASO_data_path="~/Documents/MasterThesis_Data/201507ratLNA-edgeR-liver"
file_names=list.files(path = ASO_data_path,,full.names = TRUE)
file1=read.csv(file_names[[1]],sep = "\t",header = TRUE)
View(file1)
file_names=list.files(path = ASO_data_path,full.names = TRUE)
file1=read.csv(file_names[[1]],sep = "\t",header = TRUE)
file1=read.csv(file_names[[1]],sep = "\t",header = TRUE)
files=list()
for(i in 1:length(file_names)){
files[[i]]=read.csv(file_names[i],sep = "\t",header = TRUE)
}
Gene_symbols=files[[1]]$GeneSymbol
Gene_symbols
file1=read.csv(file_names[[1]],sep = "\t",header = TRUE,stringsAsFactors = FALSE)
files=list()
for(i in 1:length(file_names)){
files[[i]]=read.csv(file_names[i],sep = "\t",header = TRUE)
}
Gene_symbols=files[[1]]$GeneSymbol
file_names
simple_file_names=strsplit(file_names,"/")
simple_file_names
simple_file_names=sapply(file_names,function(x){strsplit(x,"/")[[7]]})
simple_file_names=sapply(file_names,function(x){strsplit(x,"/")})
simple_file_names
a=strsplit(file_names[[1]],"/")
a
a[[1]]
simple_file_names=sapply(file_names,function(x){strsplit(x,"/")[[1]][7]})
simple_file_names
simple_file_names=unname(sapply(file_names,function(x){strsplit(x,"/")[[1]][7]}))
simple_file_names
simple_file_names=unname(sapply(simple_file_names,function(x){strsplit(x,".")[[1]][1]}))
simple_file_names
file_names=list.files(path = ASO_data_path,full.names = TRUE)
simple_file_names=unname(sapply(file_names,function(x){strsplit(x,"/")[[1]][7]}))
simple_file_names
strsplit(simple_file_names[1],".")[[1]]
simple_file_names
strsplit(simple_file_names[1],".")
simple_file_names[1]
print(simple_file_names[1])
simple_file_names=unname(sapply(simple_file_names,function(x){strsplit(x,split = ".")[[1]][1]}))
simple_file_names
simple_file_names=unname(sapply(file_names,function(x){strsplit(x,"/")[[1]][7]}))
simple_file_names=unname(sapply(simple_file_names,function(x){strsplit(x,split = " . ")[[1]][1]}))
simple_file_names
file_names=list.files(path = ASO_data_path,full.names = TRUE)
simple_file_names=unname(sapply(file_names,function(x){strsplit(x,"/")[[1]][7]}))
simple_file_names
strsplit(simple_file_names[1],".")
strsplit(simple_file_names[1],"\.")
simple_file_names=unname(sapply(file_names,function(x){strsplit(x,"/")[[1]][7]}))
simple_file_names=unname(sapply(simple_file_names,function(x){strsplit(x,split = "\\.")[[1]][1]}))
simple_file_names
file_names=list.files(path = ASO_data_path,full.names = TRUE)
simple_file_names=unname(sapply(file_names,function(x){strsplit(x,"/")[[1]][7]}))
simple_file_names=unname(sapply(simple_file_names,function(x){strsplit(x,split = "\\.")[[1]][1]}))
file1=read.csv(file_names[[1]],sep = "\t",header = TRUE,stringsAsFactors = FALSE)
files=list()
for(i in 1:length(file_names)){
files[[i]]=read.csv(file_names[i],sep = "\t",header = TRUE,stringsAsFactors = FALSE)
}
nonEmptyRows=which(file1$GeneSymbol==NA)
nonEmptyRows=is.na(file1$GeneSymbol)
sum(nonEmptyRows)
nonEmptyRows=!is.na(file1$GeneSymbol)
nonEmptyRows
file1=file1[nonEmptyRows,]
file1=read.csv(file_names[[1]],sep = "\t",header = TRUE,stringsAsFactors = FALSE)
file1=read.csv(file_names[[1]],sep = "\t",header = TRUE,stringsAsFactors = FALSE)
nonEmptyRows=!is.na(file1$GeneSymbol)
file1=file1[nonEmptyRows,]
files=list()
for(i in 1:length(file_names)){
files[[i]]=read.csv(file_names[i],sep = "\t",header = TRUE,stringsAsFactors = FALSE)
nonEmptyRows=!is.na(file_names[i]$GeneSymbol)
file1=files[[i]][nonEmptyRows,]
}
files=list()
for(i in 1:length(file_names)){
files[[i]]=read.csv(file_names[i],sep = "\t",header = TRUE,stringsAsFactors = FALSE)
nonEmptyRows=!is.na(files[i]$GeneSymbol)
file1=files[[i]][nonEmptyRows,]
}
file1=read.csv(file_names[[1]],sep = "\t",header = TRUE,stringsAsFactors = FALSE)
file1=read.csv(file_names[[1]],sep = "\t",header = TRUE,stringsAsFactors = FALSE)
nonEmptyRows=!is.na(file1$GeneSymbol)
file1=file1[nonEmptyRows,]
files=list()
for(i in 1:length(file_names)){
files[[i]]=read.csv(file_names[i],sep = "\t",header = TRUE,stringsAsFactors = FALSE)
nonEmptyRows=!is.na(files[i]$GeneSymbol)
files[[i]]=files[[i]][nonEmptyRows,]
}
i=1
files=list()
for(i in 1:length(file_names)){
files[[i]]=read.csv(file_names[i],sep = "\t",header = TRUE,stringsAsFactors = FALSE)
nonEmptyRows=!is.na(files[[i]]$GeneSymbol)
files[[i]]=files[[i]][nonEmptyRows,]
}
ASO_DEG=data.frame(matrix(NA,nrow = 6,ncol = nrow(files[[i]])),row.names = simple_file_names)
ASO_DEG=data.frame(matrix(NA,nrow = 6,ncol = nrow(files[[1]])),row.names = simple_file_names)
colnames(ASO_DEG)=files[[1]]$GeneSymbol
View(ASO_DEG)
simple_file_names
file_names
help("match")
b=match(files[[i]]$GeneSymbol,colnames(ASO_DEG))
b
names1=files[[1]]$GeneSymbol
names2=files[[2]]$GeneSymbol
names1[1:10]
names2[1:10]
b=match(files[[1]]$GeneSymbol,colnames(ASO_DEG))
b=match(files[[1]]$GeneSymbol,colnames(ASO_DEG))
b
b=match(files[[2]]$GeneSymbol,colnames(ASO_DEG))
b
colnames(ASO_DEG)[122]
colnames(ASO_DEG)[2733]
ASO_DEG=data.frame(matrix(NA,nrow = 6,ncol = nrow(files[[1]])),row.names = simple_file_names)
colnames(ASO_DEG)=files[[1]]$GeneSymbol
ASO_DEG=data.frame(matrix(NA,nrow = 6,ncol = nrow(files[[1]])),row.names = simple_file_names)
colnames(ASO_DEG)=files[[1]]$GeneSymbol
for(i in 1:length(file_names)){
ASO_DEG[i,]=files[[i]][match(files[[i]]$GeneSymbol,colnames(ASO_DEG)),"logFC"]
}
View(ASO_DEG)
files[[2]]$logFC
files[[1]]$logFC
help("write.csv")
write.csv(ASO_DEG,file ="ASO_DEG.csv",row.names = TRUE,col.names = TRUE,sep = ",")
getwd()
write.csv(ASO_DEG,file ="~/Documents/MasterThesis_Data/201507ratLNA-edgeR-liver/ASO_DEG.csv",row.names = TRUE,col.names = TRUE,sep = ",")
View(file1)
file1=read.csv(file_names[[1]],sep = "\t",header = TRUE,stringsAsFactors = FALSE)
View(file1)
knitr::opts_chunk$set(echo = TRUE)
library(ribiosAnnotation)
help("annotateAnyIDs")
orthologue_geneInfo=annotateAnyIDs(file1$GeneID,orthologue = TRUE)
View(file1)
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(ribiosAnnotation)
ASO_data_collectio=function(input_path,output_path){
file_names=list.files(path = ASO_data_path,full.names = TRUE)
simple_file_names=unname(sapply(file_names,function(x){strsplit(x,"/")[[1]][7]}))
simple_file_names=unname(sapply(simple_file_names,function(x){strsplit(x,split = "\\.")[[1]][1]}))
file1=read.csv(file_names[[1]],sep = "\t",header = TRUE,stringsAsFactors = FALSE)
#orthologue_geneInfo=annotateAnyIDs(file1$GeneID,orthologue = TRUE)
nonEmptyRows=!is.na(file1$GeneSymbol)
file1=file1[nonEmptyRows,]
files=list()
for(i in 1:length(file_names)){
files[[i]]=read.csv(file_names[i],sep = "\t",header = TRUE,stringsAsFactors = FALSE)
nonEmptyRows=!is.na(files[[i]]$GeneSymbol)
files[[i]]=files[[i]][nonEmptyRows,]
}
ASO_DEG=data.frame(matrix(NA,nrow = 6,ncol = nrow(files[[1]])),row.names = simple_file_names)
colnames(ASO_DEG)=files[[1]]$GeneSymbol
for(i in 1:length(file_names)){
ASO_DEG[i,]=files[[i]][match(files[[i]]$GeneSymbol,colnames(ASO_DEG)),"logFC"]
}
write.csv(ASO_DEG,file ="~/Documents/MasterThesis_Data/201507ratLNA-edgeR-liver/ASO_DEG.csv",row.names = TRUE,col.names = TRUE,sep = ",")
}
ASO_data_collection=function(input_path,output_path){
file_names=list.files(path = ASO_data_path,full.names = TRUE)
simple_file_names=unname(sapply(file_names,function(x){strsplit(x,"/")[[1]][7]}))
simple_file_names=unname(sapply(simple_file_names,function(x){strsplit(x,split = "\\.")[[1]][1]}))
file1=read.csv(file_names[[1]],sep = "\t",header = TRUE,stringsAsFactors = FALSE)
#orthologue_geneInfo=annotateAnyIDs(file1$GeneID,orthologue = TRUE)
nonEmptyRows=!is.na(file1$GeneSymbol)
file1=file1[nonEmptyRows,]
files=list()
for(i in 1:length(file_names)){
files[[i]]=read.csv(file_names[i],sep = "\t",header = TRUE,stringsAsFactors = FALSE)
nonEmptyRows=!is.na(files[[i]]$GeneSymbol)
files[[i]]=files[[i]][nonEmptyRows,]
}
ASO_DEG=data.frame(matrix(NA,nrow = 6,ncol = nrow(files[[1]])),row.names = simple_file_names)
colnames(ASO_DEG)=files[[1]]$GeneSymbol
for(i in 1:length(file_names)){
ASO_DEG[i,]=files[[i]][match(files[[i]]$GeneSymbol,colnames(ASO_DEG)),"logFC"]
}
write.csv(ASO_DEG,file ="~/Documents/MasterThesis_Data/201507ratLNA-edgeR-liver/ASO_DEG.csv",row.names = TRUE,col.names = TRUE,sep = ",")
}
input_path = ASO_data_removeOutlier_path
ASO_data_path="~/Documents/MasterThesis_Data/201507ratLNA-edgeR-liver"
ASO_data_removeOutlier_path="~/Documents/MasterThesis_Data/201507ratLNA-edgeR-liverRemoveOutlier"
input_path = ASO_data_removeOutlier_path
output_path = "~/Documents/MasterThesis_Data/201507ratLNA-edgeR-liver/ASO_removeOutlier_DEG.csv"
file_names=list.files(path = input_path,full.names = TRUE)
simple_file_names=unname(sapply(file_names,function(x){strsplit(x,"/")[[1]][7]}))
simple_file_names=unname(sapply(simple_file_names,function(x){strsplit(x,split = "\\.")[[1]][1]}))
file1=read.csv(file_names[[1]],sep = "\t",header = TRUE,stringsAsFactors = FALSE)
View(file1)
View(file1)
ASO_data_collection=function(input_path,output_path){
file_names=list.files(path = input_path,full.names = TRUE)
simple_file_names=unname(sapply(file_names,function(x){strsplit(x,"/")[[1]][7]}))
simple_file_names=unname(sapply(simple_file_names,function(x){strsplit(x,split = "\\.")[[1]][1]}))
file1=read.csv(file_names[[1]],sep = "\t",header = TRUE,stringsAsFactors = FALSE)
#orthologue_geneInfo=annotateAnyIDs(file1$GeneID,orthologue = TRUE)
nonEmptyRows=!is.na(file1$GeneSymbol)
file1=file1[nonEmptyRows,]
files=list()
for(i in 1:length(file_names)){
files[[i]]=read.csv(file_names[i],sep = "\t",header = TRUE,stringsAsFactors = FALSE)
nonEmptyRows=!is.na(files[[i]]$GeneSymbol)
files[[i]]=files[[i]][nonEmptyRows,]
}
ASO_DEG=data.frame(matrix(NA,nrow = 6,ncol = nrow(files[[1]])),row.names = simple_file_names)
colnames(ASO_DEG)=files[[1]]$GeneSymbol
for(i in 1:length(file_names)){
ASO_DEG[i,]=files[[i]][match(files[[i]]$GeneSymbol,colnames(ASO_DEG)),"logFC"]
}
write.csv(ASO_DEG,file =output_path,row.names = TRUE,col.names = TRUE,sep = ",")
}
ASO_data_collection(input_path = ASO_data_removeOutlier_path,output_path = "~/Documents/MasterThesis_Data/201507ratLNA-edgeR-liver/ASO_removeOutlier_DEG.csv")
ASO_data_collection(input_path = ASO_data_removeOutlier_path,output_path = "~/Documents/MasterThesis_Data/201507ratLNA-edgeR-liverRemoveOutlier/ASO_removeOutlier_DEG.csv")
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Documents/team_taofang/")
cwd="~/Documents/team_taofang/"
library(xlsx)
library(refGenome)
library(monocle)
library(SummarizedExperiment)
# load RNA-seq counts from patients with NAFLD
human_counts=read.csv(file =paste(cwd,"Hisat2_Counts.tsv",sep = ""),sep = "\t",header = TRUE )
# read group information from patients with NAFLD
# 1: NAFL, 2: NASH and 3: NASH-Cirrhosis
human_groups=read.xlsx(file = paste(cwd,"Allison_NASH_Official_Clinical_Database_24_02_2018_-_Seq Only.xlsx",sep = ""),sheetIndex = 4)
# read meta information from patients with NAFLD
human_meta=read.xlsx(file = paste(cwd,"Allison_NASH_Official_Clinical_Database_24_02_2018_-_Seq Only.xlsx",sep = ""),sheetIndex = 1,stringsAsFactors = FALSE)
human_meta[,"General.groups"]=human_groups[match(human_meta$SeqID,human_groups$SeqID),"General.groups"]
Human_SeqID=human_meta$SeqID
human_sim_SeqID=unname(sapply(Human_SeqID,function(x){temp=strsplit(x,split = "\\-")[[1]][c(3,4)]
paste(temp[1],temp[2],sep = ".")}))
human_sim_SeqID=sapply(human_sim_SeqID,function(x){substr(x,1,18)})
rownames(human_meta)=human_sim_SeqID
human_meta=human_meta[colnames(human_counts),]
#read grf/annotation file
#https://davetang.org/muse/2017/08/04/read-gtf-file-r/
# human_gtf_ens=ensemblGenome()
# read.gtf(human_gtf_ens, paste(cwd,"reference/Homo_sapiens.GRCh38.83.gtf",sep = ""),useBasedir = FALSE)
# human_gtf_gene <- getGenePositions(human_gtf_ens)
# human_gtf_length=data.frame(matrix(,nrow = nrow(human_gtf_gene),ncol = 2),row.names = human_gtf_gene$gene_id)
# colnames(human_gtf_length)=c("gene_id","length")
# human_gtf_length[,"gene_id"]=human_gtf_gene$gene_id
# human_gtf_length[,"length"]=human_gtf_gene$end-(human_gtf_gene$start)
# write.csv(human_gtf_gene,file = paste(cwd,"reference/human_gtf_gene.csv",sep = ""),sep = ",")
# write.csv(human_gtf_length,file = paste(cwd,"reference/human_gtf_length.csv",sep = ""),sep = ",")
human_gtf_length=read.csv(file =paste(cwd,"reference/human_gtf_length.csv",sep = "") ,sep = ",",row.names = 1,header = TRUE)
human_gtf_gene=read.csv(file =paste(cwd,"reference/human_gtf_gene.csv",sep = "") ,sep = ",",header = TRUE)
rownames(human_gtf_gene)=human_gtf_gene$gene_id
human_gtf_gene=human_gtf_gene[rownames(human_counts),]
human_gtf_length=human_gtf_length[rownames(human_counts),]
human_tpm=simple_TPM(counts = human_counts,length = human_gtf_length$length)
simple_TPM=function(counts,length){
x <- counts / length
tpm.mat <- t( t(x) * 1e6 / colSums(x) )
}
human_gtf_length=human_gtf_length[rownames(human_counts),]
human_tpm=simple_TPM(counts = human_counts,length = human_gtf_length$length)
##monocle
human_pd<- new("AnnotatedDataFrame", data = human_meta)
human_fd <- new("AnnotatedDataFrame", data = human_gtf_gene)
human_HSMM <- newCellDataSet(human_tpm,
phenoData = human_pd, featureData = human_fd,
expressionFamily = tobit())
#human_HSMM  <- estimateSizeFactors(human_HSMM )
#disp_table <- dispersionTable(human_HSMM )
unsup_clustering_genes <- rownames(human_tpm)[rowMeans(human_tpm)>0.1]
unsup_clustering_genes <- rownames(human_tpm)[rowMeans(human_tpm)>0.3]
unsup_clustering_genes <- rownames(human_tpm)[rowMeans(human_tpm)>1]
unsup_clustering_genes <- rownames(human_tpm)[rowMeans(human_tpm)>3]
HSMM <- setOrderingFilter(human_HSMM, unsup_clustering_genes)
unsup_clustering_genes <- rownames(human_tpm)[rowMeans(human_tpm)>10]
HSMM <- setOrderingFilter(human_HSMM, unsup_clustering_genes)
HSMM <- reduceDimension(HSMM,reduction_method = "ICA", max_components = 2, verbose = T)
plot_cell_clusters(HSMM_clusters, 1, 2, color = "General.groups")
HSMM_clusters <- clusterCells(HSMM, num_clusters = 3)
HSMM_clusters <- clusterCells(HSMM, num_clusters = 3)
HSMM_clusters <- clusterCells(HSMM, num_clusters = 2)
help("clusterCells")
HSMM@reducedDimS
HSMM_clusters <- clusterCells(HSMM, num_clusters = 2)
HSMM <- setOrderingFilter(human_HSMM, unsup_clustering_genes)
HSMM <- reduceDimension(HSMM,reduction_method = "ICA", max_components = 2, verbose = T)
HSMM_clusters <- clusterCells(HSMM, num_clusters = 2)
HSMM <- setOrderingFilter(human_HSMM, unsup_clustering_genes)
HSMM <- reduceDimension(HSMM,reduction_method = "ICA", max_components = 2, verbose = T)
HSMM <- reduceDimension(HSMM,reduction_method = "ICA", max_components = 2, verbose = T)
HSMM_clusters <- clusterCells(HSMM, num_clusters = 2)
HSMM_clusters <- clusterCells(HSMM, num_clusters = 2)
HSMM <- setOrderingFilter(human_HSMM, unsup_clustering_genes)
HSMM <- reduceDimension(HSMM,reduction_method = "tSNE", max_components = 2, verbose = T)
HSMM <- setOrderingFilter(human_HSMM, unsup_clustering_genes)
HSMM <- reduceDimension(HSMM,reduction_method = "tSNE", max_components = 2, num_dim=10,verbose = T)
HSMM <- reduceDimension(HSMM,reduction_method = "tSNE", max_components = 2, num_dim=100,verbose = T)
HSMM <- setOrderingFilter(human_HSMM, unsup_clustering_genes)
HSMM <- reduceDimension(HSMM,reduction_method = "ICA", max_components = 2, num_dim=10,verbose = T)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("TSCAN", version = "3.8")
source("https://bioconductor.org/biocLite.R")
BiocInstaller::biocLite("TSCAN")
library(TSCAN)
help("preprocess")
procdata <- preprocess(human_tpm)
View(procdata)
lpsmclust <- exprmclust(procdata)
plotmclust(lpsmclust)
human_groups
lpsorder <- TSCANorder(lpsmclust)
lpsorder
View(human_groups)
diffval <- difftest(procdata,lpsorder)
head(row.names(diffval)[diffval$qval < 0.05])
help("exprmclust")
help("plotmclust")
lpsorder
View(human_groups)
plotmclust(lpsmclust)
procdata <- preprocess(human_tpm)
lpsmclust <- exprmclust(procdata,clusternum = 3)
plotmclust(lpsmclust)
lpsm_dim=lpsmclust$clusterid
lpsm_dim=
lpsmclust$clusterid
lpsmclust$clusterid
order(lpsmclust$clusterid)
names(lpsmclust$clusterid)
names(lpsmclust$clusterid)[lpsmclust$clusterid==1]
names(lpsmclust$clusterid)[lpsmclust$clusterid==3]
names(lpsmclust$clusterid)[lpsmclust$clusterid==2]
names(lpsmclust$clusterid)[lpsmclust$clusterid==3]
order(names(lpsmclust$clusterid)[lpsmclust$clusterid==3])
names(lpsmclust$clusterid)[lpsmclust$clusterid==3]
overlap(names(lpsmclust$clusterid)[lpsmclust$clusterid==1],human_meta[human_meta$General.groups==1,"SeqID"])
overlap(names(lpsmclust$clusterid)[lpsmclust$clusterid==1],human_meta[human_meta[,"General.groups"]==1,"SeqID"])
human_meta[,"General.groups"]==1
human_meta[human_meta[,"General.groups"]==1,"SeqID"])
human_meta[human_meta[,"General.groups"]==1,"SeqID"]
names(lpsmclust$clusterid)[lpsmclust$clusterid==1]
View(human_meta)
intersect(names(lpsmclust$clusterid)[lpsmclust$clusterid==1],rownames(human_meta)[human_meta[,"General.groups"]==1])
intersect(names(lpsmclust$clusterid)[lpsmclust$clusterid==2],rownames(human_meta)[human_meta[,"General.groups"]==2])
intersect(names(lpsmclust$clusterid)[lpsmclust$clusterid==3],rownames(human_meta)[human_meta[,"General.groups"]==3])
rm(list = ls())
rm(list = ls())
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
library(roxygen2)
setwd("~/Documents/GeneModuleAnnotationPaper/code")
library(Matrix)
library(GENEMABR)
human_go_ontology=readRDS(system.file("extdata", "go_ontology.rds", package = "GENEMABR"))
human_reactome_ontology=readRDS(system.file("extdata", "human_reactome_ontology.rds", package = "GENEMABR"))
gene_pathway_matrix=readRDS(system.file("extdata", "gene_pathway_matrix.rds", package = "GENEMABR"))
setwd("~/Documents/GeneModuleAnnotationPaper/code/GENEMABR")
v
setwd("~/Documents/GeneModuleAnnotationPaper/code/GENEMABR")
document()
setwd("~/Documents/GeneModuleAnnotationPaper/code")
install("GENEMABR")
library(GENEMABR)
help("regression_selected_pathways")setwd("~/Documents/GeneModuleAnnotationPaper/code/GENEMABR")
document()
setwd("~/Documents/GeneModuleAnnotationPaper/code")
install("GENEMABR")
library(GENEMABR)
setwd("~/Documents/GeneModuleAnnotationPaper/code/GENEMABR")
document()
setwd("~/Documents/GeneModuleAnnotationPaper/code")
install("GENEMABR")
library(GENEMABR)
help("regression_selected_pathways")
setwd("~/Documents/GeneModuleAnnotationPaper/code/GENEMABR")
document()
setwd("~/Documents/GeneModuleAnnotationPaper/code")
install("GENEMABR")
library(GENEMABR)
help("regression_selected_pathways")
