install("GENEMABR")
library(GENEMABR)
enrichment_results=regression_selected_pathways(gene_input=gene_list,gene_pathway_matrix="default",alpha=0.5)
regression_selected_pathways=function(gene_input,gene_pathway_matrix="default",lambda=0.007956622,alpha=0.5,...){
library(glmnet)
addi_args=list(...)
if(gene_pathway_matrix=="default"){
gene_pathway_matrix=readRDS(system.file("extdata", "gene_pathway_matrix.rds", package = "GENEMABR"))
}
all_genes=rownames(gene_pathway_matrix)
all_pathways=colnames(gene_pathway_matrix)
module_labels=rep(0,length(all_genes))          #len:20244F
names(module_labels)=all_genes
module_common_genes=intersect(all_genes,gene_input)
if(length(module_common_genes)>1){                     # should set a lower thereshold for num of module common genes, more than 50%
module_labels[module_common_genes]=1
if(length(addi_args)==0){
cvfit=glmnet(gene_pathway_matrix,module_labels,lambda = lambda,alpha =alpha,...)
}else{
cvfit=glmnet(gene_pathway_matrix,module_labels,alpha =alpha,...)
}
coef=coef(cvfit, s = "lambda.min")
non0index=coef@i[-1]   #remove intercept
non0coef=coef@x[-1]
selected_index=non0index[which(non0coef>0)]
selected_pathways=all_pathways[selected_index]
selected_coef=non0coef[which(non0coef>0)]
names(selected_coef)=selected_pathways
if(length(selected_pathways)>0){
fisher_exact_test_results=fisher_exact_test(selected_pathways,module_common_genes,gene_pathway_matrix="default" )
selected_pathways_fisher_pvalue=fisher_exact_test_results$selected_pathways_fisher_pvalue
selected_pathways_num_genes=fisher_exact_test_results$selected_pathways_num_genes
new_order=order(selected_coef,decreasing = TRUE)
return(list(selected_pathways_coef=selected_coef[new_order],
selected_pathways_fisher_pvalue=selected_pathways_fisher_pvalue[new_order],
selected_pathways_num_genes=selected_pathways_num_genes[new_order]
))
}else{
return(NULL)}
}
}
enrichment_results=regression_selected_pathways(gene_input=gene_list,gene_pathway_matrix="default",alpha=0.5)
enrichment_results=regression_selected_pathways(gene_input=gene_list,gene_pathway_matrix="default",alpha=0.5)
enrichment_results
regression_selected_pathways=function(gene_input,gene_pathway_matrix="default",lambda=0.007956622,alpha=0.5,...){
library(glmnet)
addi_args=list(...)
if(gene_pathway_matrix=="default"){
gene_pathway_matrix=readRDS(system.file("extdata", "gene_pathway_matrix.rds", package = "GENEMABR"))
}
all_genes=rownames(gene_pathway_matrix)
all_pathways=colnames(gene_pathway_matrix)
module_labels=rep(0,length(all_genes))          #len:20244F
names(module_labels)=all_genes
module_common_genes=intersect(all_genes,gene_input)
if(length(module_common_genes)>1){                     # should set a lower thereshold for num of module common genes, more than 50%
module_labels[module_common_genes]=1
if(length(addi_args)==0){
cvfit=glmnet(gene_pathway_matrix,module_labels,lambda = lambda,alpha =alpha,...)
}else{
cvfit=glmnet(gene_pathway_matrix,module_labels,alpha =alpha,...)
}
coef=coef(cvfit, s = "lambda.min")
non0index=coef@i[-1]   #remove intercept
non0coef=coef@x[-1]
selected_index=non0index[which(non0coef>0)]
selected_pathways=all_pathways[selected_index]
selected_coef=non0coef[which(non0coef>0)]
names(selected_coef)=selected_pathways
if(length(selected_pathways)>0){
fisher_exact_test_results=fisher_exact_test(selected_pathways,module_common_genes,gene_pathway_matrix="default" )
selected_pathways_fisher_pvalue=fisher_exact_test_results$selected_pathways_fisher_pvalue
selected_pathways_num_genes=fisher_exact_test_results$selected_pathways_num_genes
new_order=order(selected_coef,decreasing = TRUE)
return(list(selected_pathways_names=names(selected_coef)[new_order],
selected_pathways_coef=selected_coef[new_order],
selected_pathways_fisher_pvalue=selected_pathways_fisher_pvalue[new_order],
selected_pathways_num_genes=selected_pathways_num_genes[new_order]
))
}else{
return(NULL)}
}
}
enrichment_results=regression_selected_pathways(gene_input=gene_list,gene_pathway_matrix="default",alpha=0.5)
enrichment_results
regression_selected_pathways=function(gene_input,gene_pathway_matrix="default",lambda=0.007956622,alpha=0.5,...){
library(glmnet)
addi_args=list(...)
if(gene_pathway_matrix=="default"){
gene_pathway_matrix=readRDS(system.file("extdata", "gene_pathway_matrix.rds", package = "GENEMABR"))
}
all_genes=rownames(gene_pathway_matrix)
all_pathways=colnames(gene_pathway_matrix)
module_labels=rep(0,length(all_genes))          #len:20244F
names(module_labels)=all_genes
module_common_genes=intersect(all_genes,gene_input)
if(length(module_common_genes)>1){                     # should set a lower thereshold for num of module common genes, more than 50%
module_labels[module_common_genes]=1
if(length(addi_args)==0){
cvfit=glmnet(gene_pathway_matrix,module_labels,lambda = lambda,alpha =alpha,...)
}else{
cvfit=glmnet(gene_pathway_matrix,module_labels,alpha =alpha,...)
}
coef=coef(cvfit, s = "lambda.min")
non0index=coef@i[-1]   #remove intercept
non0coef=coef@x[-1]
selected_index=non0index[which(non0coef>0)]
selected_pathways=all_pathways[selected_index]
selected_coef=non0coef[which(non0coef>0)]
names(selected_coef)=selected_pathways
if(length(selected_pathways)>0){
fisher_exact_test_results=fisher_exact_test(selected_pathways,module_common_genes,gene_pathway_matrix="default" )
selected_pathways_fisher_pvalue=fisher_exact_test_results$selected_pathways_fisher_pvalue
selected_pathways_num_genes=fisher_exact_test_results$selected_pathways_num_genes
new_order=order(selected_coef,decreasing = TRUE)
return(list(selected_pathways_names=from_id2name(selected_pathways=selected_coef[new_order]),
selected_pathways_coef=,
selected_pathways_fisher_pvalue=selected_pathways_fisher_pvalue[new_order],
selected_pathways_num_genes=selected_pathways_num_genes[new_order]
))
}else{
return(NULL)}
}
}
enrichment_results=regression_selected_pathways(gene_input=gene_list,gene_pathway_matrix="default",alpha=0.5)
help("from_id2name")
.rs.restartR()
knitr::opts_chunk$set(echo = TRUE)
enrichment_results=regression_selected_pathways(gene_input=gene_list,gene_pathway_matrix="default",alpha=0.5)
help("from_id2name")
regression_selected_pathways=function(gene_input,gene_pathway_matrix="default",lambda=0.007956622,alpha=0.5,...){
library(glmnet)
addi_args=list(...)
if(gene_pathway_matrix=="default"){
gene_pathway_matrix=readRDS(system.file("extdata", "gene_pathway_matrix.rds", package = "GENEMABR"))
}
all_genes=rownames(gene_pathway_matrix)
all_pathways=colnames(gene_pathway_matrix)
module_labels=rep(0,length(all_genes))          #len:20244F
names(module_labels)=all_genes
module_common_genes=intersect(all_genes,gene_input)
if(length(module_common_genes)>1){                     # should set a lower thereshold for num of module common genes, more than 50%
module_labels[module_common_genes]=1
if(length(addi_args)==0){
cvfit=glmnet(gene_pathway_matrix,module_labels,lambda = lambda,alpha =alpha,...)
}else{
cvfit=glmnet(gene_pathway_matrix,module_labels,alpha =alpha,...)
}
coef=coef(cvfit, s = "lambda.min")
non0index=coef@i[-1]   #remove intercept
non0coef=coef@x[-1]
selected_index=non0index[which(non0coef>0)]
selected_pathways=all_pathways[selected_index]
selected_coef=non0coef[which(non0coef>0)]
names(selected_coef)=selected_pathways
if(length(selected_pathways)>0){
fisher_exact_test_results=fisher_exact_test(selected_pathways,module_common_genes,gene_pathway_matrix="default" )
selected_pathways_fisher_pvalue=fisher_exact_test_results$selected_pathways_fisher_pvalue
selected_pathways_num_genes=fisher_exact_test_results$selected_pathways_num_genes
new_order=order(selected_coef,decreasing = TRUE)
return(list(selected_pathways_names=from_id2name(selected_pathways=selected_coef[new_order]),
selected_pathways_coef=selected_pathways=selected_coef[new_order],
selected_pathways_fisher_pvalue=selected_pathways_fisher_pvalue[new_order],
selected_pathways_num_genes=selected_pathways_num_genes[new_order]
))
}else{
return(NULL)}
}
}
regression_selected_pathways=function(gene_input,gene_pathway_matrix="default",lambda=0.007956622,alpha=0.5,...){
library(glmnet)
addi_args=list(...)
if(gene_pathway_matrix=="default"){
gene_pathway_matrix=readRDS(system.file("extdata", "gene_pathway_matrix.rds", package = "GENEMABR"))
}
all_genes=rownames(gene_pathway_matrix)
all_pathways=colnames(gene_pathway_matrix)
module_labels=rep(0,length(all_genes))          #len:20244F
names(module_labels)=all_genes
module_common_genes=intersect(all_genes,gene_input)
if(length(module_common_genes)>1){                     # should set a lower thereshold for num of module common genes, more than 50%
module_labels[module_common_genes]=1
if(length(addi_args)==0){
cvfit=glmnet(gene_pathway_matrix,module_labels,lambda = lambda,alpha =alpha,...)
}else{
cvfit=glmnet(gene_pathway_matrix,module_labels,alpha =alpha,...)
}
coef=coef(cvfit, s = "lambda.min")
non0index=coef@i[-1]   #remove intercept
non0coef=coef@x[-1]
selected_index=non0index[which(non0coef>0)]
selected_pathways=all_pathways[selected_index]
selected_coef=non0coef[which(non0coef>0)]
names(selected_coef)=selected_pathways
if(length(selected_pathways)>0){
fisher_exact_test_results=fisher_exact_test(selected_pathways,module_common_genes,gene_pathway_matrix="default" )
selected_pathways_fisher_pvalue=fisher_exact_test_results$selected_pathways_fisher_pvalue
selected_pathways_num_genes=fisher_exact_test_results$selected_pathways_num_genes
new_order=order(selected_coef,decreasing = TRUE)
return(list(selected_pathways_names=from_id2name(selected_pathways=selected_coef[new_order]),
selected_pathways_coef=selected_pathways=selected_coef[new_order],
selected_pathways_fisher_pvalue=selected_pathways_fisher_pvalue[new_order],
selected_pathways_num_genes=selected_pathways_num_genes[new_order]
))
}else{
return(NULL)}
}
}
regression_selected_pathways=function(gene_input,gene_pathway_matrix="default",lambda=0.007956622,alpha=0.5,...){
library(glmnet)
addi_args=list(...)
if(gene_pathway_matrix=="default"){
gene_pathway_matrix=readRDS(system.file("extdata", "gene_pathway_matrix.rds", package = "GENEMABR"))
}
all_genes=rownames(gene_pathway_matrix)
all_pathways=colnames(gene_pathway_matrix)
module_labels=rep(0,length(all_genes))          #len:20244F
names(module_labels)=all_genes
module_common_genes=intersect(all_genes,gene_input)
if(length(module_common_genes)>1){                     # should set a lower thereshold for num of module common genes, more than 50%
module_labels[module_common_genes]=1
if(length(addi_args)==0){
cvfit=glmnet(gene_pathway_matrix,module_labels,lambda = lambda,alpha =alpha,...)
}else{
cvfit=glmnet(gene_pathway_matrix,module_labels,alpha =alpha,...)
}
coef=coef(cvfit, s = "lambda.min")
non0index=coef@i[-1]   #remove intercept
non0coef=coef@x[-1]
selected_index=non0index[which(non0coef>0)]
selected_pathways=all_pathways[selected_index]
selected_coef=non0coef[which(non0coef>0)]
names(selected_coef)=selected_pathways
if(length(selected_pathways)>0){
fisher_exact_test_results=fisher_exact_test(selected_pathways,module_common_genes,gene_pathway_matrix="default" )
selected_pathways_fisher_pvalue=fisher_exact_test_results$selected_pathways_fisher_pvalue
selected_pathways_num_genes=fisher_exact_test_results$selected_pathways_num_genes
new_order=order(selected_coef,decreasing = TRUE)
return(list(selected_pathways_names=from_id2name(selected_pathways=selected_coef[new_order]),
selected_pathways_coef=selected_pathways=selected_coef[new_order],
selected_pathways_fisher_pvalue=selected_pathways_fisher_pvalue[new_order],
selected_pathways_num_genes=selected_pathways_num_genes[new_order]
))
}else{
return(NULL)}
}
}
regression_selected_pathways=function(gene_input,gene_pathway_matrix="default",lambda=0.007956622,alpha=0.5,...){
library(glmnet)
addi_args=list(...)
if(gene_pathway_matrix=="default"){
gene_pathway_matrix=readRDS(system.file("extdata", "gene_pathway_matrix.rds", package = "GENEMABR"))
}
all_genes=rownames(gene_pathway_matrix)
all_pathways=colnames(gene_pathway_matrix)
module_labels=rep(0,length(all_genes))          #len:20244F
names(module_labels)=all_genes
module_common_genes=intersect(all_genes,gene_input)
if(length(module_common_genes)>1){                     # should set a lower thereshold for num of module common genes, more than 50%
module_labels[module_common_genes]=1
if(length(addi_args)==0){
cvfit=glmnet(gene_pathway_matrix,module_labels,lambda = lambda,alpha =alpha,...)
}else{
cvfit=glmnet(gene_pathway_matrix,module_labels,alpha =alpha,...)
}
coef=coef(cvfit, s = "lambda.min")
non0index=coef@i[-1]   #remove intercept
non0coef=coef@x[-1]
selected_index=non0index[which(non0coef>0)]
selected_pathways=all_pathways[selected_index]
selected_coef=non0coef[which(non0coef>0)]
names(selected_coef)=selected_pathways
if(length(selected_pathways)>0){
fisher_exact_test_results=fisher_exact_test(selected_pathways,module_common_genes,gene_pathway_matrix="default" )
selected_pathways_fisher_pvalue=fisher_exact_test_results$selected_pathways_fisher_pvalue
selected_pathways_num_genes=fisher_exact_test_results$selected_pathways_num_genes
new_order=order(selected_coef,decreasing = TRUE)
return(list(selected_pathways_names=from_id2name(selected_pathways=selected_coef[new_order]),
selected_pathways_coef=selected_pathways=selected_coef[new_order],
selected_pathways_fisher_pvalue=selected_pathways_fisher_pvalue[new_order],
selected_pathways_num_genes=selected_pathways_num_genes[new_order]
))
}else{
return(NULL)}
}
}
regression_selected_pathways=function(gene_input,gene_pathway_matrix="default",lambda=0.007956622,alpha=0.5,...){
library(glmnet)
addi_args=list(...)
if(gene_pathway_matrix=="default"){
gene_pathway_matrix=readRDS(system.file("extdata", "gene_pathway_matrix.rds", package = "GENEMABR"))
}
all_genes=rownames(gene_pathway_matrix)
all_pathways=colnames(gene_pathway_matrix)
module_labels=rep(0,length(all_genes))          #len:20244F
names(module_labels)=all_genes
module_common_genes=intersect(all_genes,gene_input)
if(length(module_common_genes)>1){                     # should set a lower thereshold for num of module common genes, more than 50%
module_labels[module_common_genes]=1
if(length(addi_args)==0){
cvfit=glmnet(gene_pathway_matrix,module_labels,lambda = lambda,alpha =alpha,...)
}else{
cvfit=glmnet(gene_pathway_matrix,module_labels,alpha =alpha,...)
}
coef=coef(cvfit, s = "lambda.min")
non0index=coef@i[-1]   #remove intercept
non0coef=coef@x[-1]
selected_index=non0index[which(non0coef>0)]
selected_pathways=all_pathways[selected_index]
selected_coef=non0coef[which(non0coef>0)]
names(selected_coef)=selected_pathways
if(length(selected_pathways)>0){
fisher_exact_test_results=fisher_exact_test(selected_pathways,module_common_genes,gene_pathway_matrix="default" )
selected_pathways_fisher_pvalue=fisher_exact_test_results$selected_pathways_fisher_pvalue
selected_pathways_num_genes=fisher_exact_test_results$selected_pathways_num_genes
new_order=order(selected_coef,decreasing = TRUE)
return(list(selected_pathways_names=from_id2name(selected_pathways=selected_coef[new_order]),
selected_pathways_coef=selected_pathways=selected_coef[new_order],
selected_pathways_fisher_pvalue=selected_pathways_fisher_pvalue[new_order],
selected_pathways_num_genes=selected_pathways_num_genes[new_order]
))
}else{
return(NULL)}
}
}
regression_selected_pathways=function(gene_input,gene_pathway_matrix="default",lambda=0.007956622,alpha=0.5,...){
library(glmnet)
addi_args=list(...)
if(gene_pathway_matrix=="default"){
gene_pathway_matrix=readRDS(system.file("extdata", "gene_pathway_matrix.rds", package = "GENEMABR"))
}
all_genes=rownames(gene_pathway_matrix)
all_pathways=colnames(gene_pathway_matrix)
module_labels=rep(0,length(all_genes))          #len:20244F
names(module_labels)=all_genes
module_common_genes=intersect(all_genes,gene_input)
if(length(module_common_genes)>1){                     # should set a lower thereshold for num of module common genes, more than 50%
module_labels[module_common_genes]=1
if(length(addi_args)==0){
cvfit=glmnet(gene_pathway_matrix,module_labels,lambda = lambda,alpha =alpha,...)
}else{
cvfit=glmnet(gene_pathway_matrix,module_labels,alpha =alpha,...)
}
coef=coef(cvfit, s = "lambda.min")
non0index=coef@i[-1]   #remove intercept
non0coef=coef@x[-1]
selected_index=non0index[which(non0coef>0)]
selected_pathways=all_pathways[selected_index]
selected_coef=non0coef[which(non0coef>0)]
names(selected_coef)=selected_pathways
if(length(selected_pathways)>0){
fisher_exact_test_results=fisher_exact_test(selected_pathways,module_common_genes,gene_pathway_matrix="default" )
selected_pathways_fisher_pvalue=fisher_exact_test_results$selected_pathways_fisher_pvalue
selected_pathways_num_genes=fisher_exact_test_results$selected_pathways_num_genes
new_order=order(selected_coef,decreasing = TRUE)
return(list(selected_pathways_coef=selected_pathways=selected_coef[new_order],
selected_pathways_fisher_pvalue=selected_pathways_fisher_pvalue[new_order],
selected_pathways_num_genes=selected_pathways_num_genes[new_order]
))
}else{
return(NULL)}
}
}
regression_selected_pathways=function(gene_input,gene_pathway_matrix="default",lambda=0.007956622,alpha=0.5,...){
library(glmnet)
addi_args=list(...)
if(gene_pathway_matrix=="default"){
gene_pathway_matrix=readRDS(system.file("extdata", "gene_pathway_matrix.rds", package = "GENEMABR"))
}
all_genes=rownames(gene_pathway_matrix)
all_pathways=colnames(gene_pathway_matrix)
module_labels=rep(0,length(all_genes))          #len:20244F
names(module_labels)=all_genes
module_common_genes=intersect(all_genes,gene_input)
if(length(module_common_genes)>1){                     # should set a lower thereshold for num of module common genes, more than 50%
module_labels[module_common_genes]=1
if(length(addi_args)==0){
cvfit=glmnet(gene_pathway_matrix,module_labels,lambda = lambda,alpha =alpha,...)
}else{
cvfit=glmnet(gene_pathway_matrix,module_labels,alpha =alpha,...)
}
coef=coef(cvfit, s = "lambda.min")
non0index=coef@i[-1]   #remove intercept
non0coef=coef@x[-1]
selected_index=non0index[which(non0coef>0)]
selected_pathways=all_pathways[selected_index]
selected_coef=non0coef[which(non0coef>0)]
names(selected_coef)=selected_pathways
if(length(selected_pathways)>0){
fisher_exact_test_results=fisher_exact_test(selected_pathways,module_common_genes,gene_pathway_matrix="default" )
selected_pathways_fisher_pvalue=fisher_exact_test_results$selected_pathways_fisher_pvalue
selected_pathways_num_genes=fisher_exact_test_results$selected_pathways_num_genes
new_order=order(selected_coef,decreasing = TRUE)
return(list(selected_pathways_names=from_id2name(selected_pathways=selected_coef[new_order]),
selected_pathways_coef=selected_coef[new_order],
selected_pathways_fisher_pvalue=selected_pathways_fisher_pvalue[new_order],
selected_pathways_num_genes=selected_pathways_num_genes[new_order]
))
}else{
return(NULL)}
}
}
enrichment_results=regression_selected_pathways(gene_input=gene_list,gene_pathway_matrix="default",alpha=0.5)
enrichment_results
enrichment_results$selected_pathways_coef
regression_selected_pathways=function(gene_input,gene_pathway_matrix="default",lambda=0.007956622,alpha=0.5,...){
library(glmnet)
addi_args=list(...)
if(gene_pathway_matrix=="default"){
gene_pathway_matrix=readRDS(system.file("extdata", "gene_pathway_matrix.rds", package = "GENEMABR"))
}
all_genes=rownames(gene_pathway_matrix)
all_pathways=colnames(gene_pathway_matrix)
module_labels=rep(0,length(all_genes))          #len:20244F
names(module_labels)=all_genes
module_common_genes=intersect(all_genes,gene_input)
if(length(module_common_genes)>1){                     # should set a lower thereshold for num of module common genes, more than 50%
module_labels[module_common_genes]=1
if(length(addi_args)==0){
cvfit=glmnet(gene_pathway_matrix,module_labels,lambda = lambda,alpha =alpha,...)
}else{
cvfit=glmnet(gene_pathway_matrix,module_labels,alpha =alpha,...)
}
coef=coef(cvfit, s = "lambda.min")
non0index=coef@i[-1]   #remove intercept
non0coef=coef@x[-1]
selected_index=non0index[which(non0coef>0)]
selected_pathways=all_pathways[selected_index]
selected_coef=non0coef[which(non0coef>0)]
names(selected_coef)=selected_pathways
if(length(selected_pathways)>0){
fisher_exact_test_results=fisher_exact_test(selected_pathways,module_common_genes,gene_pathway_matrix="default" )
selected_pathways_fisher_pvalue=fisher_exact_test_results$selected_pathways_fisher_pvalue
selected_pathways_num_genes=fisher_exact_test_results$selected_pathways_num_genes
new_order=order(selected_coef,decreasing = TRUE)
return(list(selected_pathways_names=from_id2name(selected_pathways=names(selected_coef[new_order])),
selected_pathways_coef=selected_coef[new_order],
selected_pathways_fisher_pvalue=selected_pathways_fisher_pvalue[new_order],
selected_pathways_num_genes=selected_pathways_num_genes[new_order]
))
}else{
return(NULL)}
}
}
enrichment_results=regression_selected_pathways(gene_input=gene_list,gene_pathway_matrix="default",alpha=0.5)
enrichment_results
a=names(enrichment_results$selected_pathways_coef)
a
from_id2name(a)
from_id2name=function(selected_pathways){
go_ontology=readRDS(system.file("extdata", "human_go_ontology.rds", package = "GENEMABR"))
reactome_ontology=readRDS(system.file("extdata", "human_reactome_ontology.rds", package = "GENEMABR"))
go_ontology_names=V(go_ontology)$pathway_names
names(go_ontology_names)=as_ids(V(go_ontology))
reactome_ontology_names=V(reactome_ontology)$pathway_names
names(reactome_ontology_names)=as_ids(V(reactome_ontology))
names=lapply(selected_pathways, function(x){
if(grepl("#",x)){
if(grepl("GO",x)){
y=strsplit(x,split = "#")[[1]]
unname(go_ontology_names[y])
}else{
y=strsplit(x,split = "#")[[1]]
unname(reactome_ontology_names[y])
}
}else{
if(grepl("GO",x)){
unname(go_ontology_names[x])
}else{
unname(reactome_ontology_names[x])
}
}
})
names=selected_pathways
return(names)
}
enrichment_results=regression_selected_pathways(gene_input=gene_list,gene_pathway_matrix="default",alpha=0.5)
enrichment_results
from_id2name=function(selected_pathways){
go_ontology=readRDS(system.file("extdata", "human_go_ontology.rds", package = "GENEMABR"))
reactome_ontology=readRDS(system.file("extdata", "human_reactome_ontology.rds", package = "GENEMABR"))
go_ontology_names=V(go_ontology)$pathway_names
names(go_ontology_names)=as_ids(V(go_ontology))
reactome_ontology_names=V(reactome_ontology)$pathway_names
names(reactome_ontology_names)=as_ids(V(reactome_ontology))
names=lapply(selected_pathways, function(x){
if(grepl("#",x)){
if(grepl("GO",x)){
y=strsplit(x,split = "#")[[1]]
unname(go_ontology_names[y])
}else{
y=strsplit(x,split = "#")[[1]]
unname(reactome_ontology_names[y])
}
}else{
if(grepl("GO",x)){
unname(go_ontology_names[x])
}else{
unname(reactome_ontology_names[x])
}
}
})
names(names)=selected_pathways
return(names)
}
enrichment_results=regression_selected_pathways(gene_input=gene_list,gene_pathway_matrix="default",alpha=0.5)
enrichment_results
hypergeometric_test_results=read.csv(file = "../inst/extdata/Daniel_S5_mod283.txt",header = T)
hypergeometric_test_results=read.csv(file = "../inst/extdata/Daniel_S5_mod283.txt",header = T)
hypergeometric_test_results=read.csv(file = "../inst/extdata/Daniel_S5_mod283.txt",header = T)
View(hypergeometric_test_results)
hypergeometric_test_results=read.csv(file = "../inst/extdata/Daniel_S5_mod283.txt",header = T,sep = "\t")
